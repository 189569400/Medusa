
import zipfile
import json


def dd():
    zipFile = zipfile.ZipFile('/Users/ascotbe/Downloads/nvdcve-1.1-recent.json.zip', 'r')

    data = zipFile.read('nvdcve-1.1-recent.json').decode('utf-8')#读取到的byte类型进行转换到字符串类型
    ba=json.loads(data)["CVE_Items"]

    for i in ba:
        print(i)


    zipFile.close()

a="""
{
	"cve": {
		"data_type": "CVE",
		"data_format": "MITRE",
		"data_version": "4.0",
		"CVE_data_meta": {
			"ID": "CVE-2015-8011",
			"ASSIGNER": "cve@mitre.org"
		},
		"problemtype": {
			"problemtype_data": [{
				"description": [{
					"lang": "en",
					"value": "CWE-120"
				}]
			}]
		},
		"references": {
			"reference_data": [{
				"url": "http://www.openwall.com/lists/oss-security/2015/10/16/2",
				"name": "http://www.openwall.com/lists/oss-security/2015/10/16/2",
				"refsource": "MISC",
				"tags": ["Mailing List", "Patch", "Third Party Advisory"]
			}, {
				"url": "http://www.openwall.com/lists/oss-security/2015/10/30/2",
				"name": "http://www.openwall.com/lists/oss-security/2015/10/30/2",
				"refsource": "MISC",
				"tags": ["Mailing List", "Patch", "Third Party Advisory"]
			}, {
				"url": "https://github.com/vincentbernat/lldpd/commit/dd4f16e7e816f2165fba76e3d162cd8d2978dcb2",
				"name": "https://github.com/vincentbernat/lldpd/commit/dd4f16e7e816f2165fba76e3d162cd8d2978dcb2",
				"refsource": "MISC",
				"tags": ["Patch", "Third Party Advisory"]
			}, {
				"url": "https://lists.debian.org/debian-lts-announce/2021/02/msg00032.html",
				"name": "[debian-lts-announce] 20210219 [SECURITY] [DLA 2571-1] openvswitch security update",
				"refsource": "MLIST",
				"tags": []
			}, {
				"url": "https://www.debian.org/security/2021/dsa-4836",
				"name": "DSA-4836",
				"refsource": "DEBIAN",
				"tags": ["Third Party Advisory"]
			}]
		},
		"description": {
			"description_data": [{
				"lang": "en",
				"value": "Buffer overflow in the lldp_decode function in daemon/protocols/lldp.c in lldpd before 0.8.0 allows remote attackers to cause a denial of service (daemon crash) and possibly execute arbitrary code via vectors involving large management addresses and TLV boundaries."
			}]
		}
	},
	"configurations": {
		"CVE_data_version": "4.0",
		"nodes": [{
			"operator": "OR",
			"cpe_match": [{
				"vulnerable": true,
				"cpe23Uri": "cpe:2.3:a:lldpd_project:lldpd:*:*:*:*:*:*:*:*",
				"versionStartIncluding": "0.5.6",
				"versionEndExcluding": "0.8.0"
			}]
		}, {
			"operator": "OR",
			"cpe_match": [{
				"vulnerable": true,
				"cpe23Uri": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*"
			}]
		}]
	},
	"impact": {
		"baseMetricV3": {
			"cvssV3": {
				"version": "3.1",
				"vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H",
				"attackVector": "NETWORK",
				"attackComplexity": "LOW",
				"privilegesRequired": "NONE",
				"userInteraction": "NONE",
				"scope": "UNCHANGED",
				"confidentialityImpact": "HIGH",
				"integrityImpact": "HIGH",
				"availabilityImpact": "HIGH",
				"baseScore": 9.8,
				"baseSeverity": "CRITICAL"
			},
			"exploitabilityScore": 3.9,
			"impactScore": 5.9
		},
		"baseMetricV2": {
			"cvssV2": {
				"version": "2.0",
				"vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P",
				"accessVector": "NETWORK",
				"accessComplexity": "MEDIUM",
				"authentication": "NONE",
				"confidentialityImpact": "PARTIAL",
				"integrityImpact": "PARTIAL",
				"availabilityImpact": "PARTIAL",
				"baseScore": 6.8
			},
			"severity": "MEDIUM",
			"exploitabilityScore": 8.6,
			"impactScore": 6.4,
			"acInsufInfo": false,
			"obtainAllPrivilege": false,
			"obtainUserPrivilege": false,
			"obtainOtherPrivilege": false,
			"userInteractionRequired": false
		}
	},
	"publishedDate": "2020-01-28T19:15Z",
	"lastModifiedDate": "2021-02-20T01:15Z"
}"""

print(json.loads(a))

def DataProcessing():
    c=json.loads(a)["cve"]["CVE_data_meta"]["ID"]#提取CVE编号
    cc=json.loads(a)["impact"]["baseMetricV3"]["cvssV3"]["baseScore"]#CVSS v3版本分值
    cc = json.loads(a)["impact"]["baseMetricV3"]["cvssV3"]["baseSeverity"]  # CVSS v3等级分类
    cc = json.loads(a)["impact"]["baseMetricV2"]["cvssV2"]["baseScore"]  # CVSS v2版本分值
    cc = json.loads(a)["impact"]["baseMetricV2"]["severity"]  # CVSS v2等级分类
    cc = json.loads(a)["lastModifiedDate"].partition('T')[0]  #最后修改日期
    cc=json.loads(a)["cve"]["description"]["description_data"][0]["value"]#漏洞说明
    cc = json.loads(a)["configurations"]["nodes"]
    Vendors=[]#存放供应商
    VendorsTmp= []  # 存放未进行大小写转换的供应商数据
    Products=[]#存放产品
    ProductsTmp = []  # 存放未进行大小写转换的产品数据
    for i in cc:
        VendorsTmp.append(i["cpe_match"][0]["cpe23Uri"].split(":")[3])#对供应商数据进行提取分割
        ProductsTmp.append(i["cpe_match"][0]["cpe23Uri"].split(":")[4])#对产品数据进行提取分割
    for i in VendorsTmp:#对供应商数据进行处理
        Tmp=[]#临时数据
        for x in i.split("_"):#进行数据分割
            Tmp.append(x.capitalize())#首字母大写化
        Vendors.append(' '.join(Tmp))#对数据进行拼接后发送到容器
    for i in ProductsTmp:#对供产品据进行处理
        Tmp=[]#临时数据
        for x in i.split("_"):#进行数据分割
            Tmp.append(x.capitalize())#首字母大写化
        Products.append(' '.join(Tmp))#对数据进行拼接后发送到容器

    print(Vendors)
    print(Products)


DataProcessing()
